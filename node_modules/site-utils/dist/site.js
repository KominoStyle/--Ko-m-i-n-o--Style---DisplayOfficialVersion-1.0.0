"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Site = void 0;
const axios_1 = __importDefault(require("axios"));
const jsdom_1 = require("jsdom");
const jquery_1 = __importDefault(require("jquery"));
const download_js_1 = require("./download.js");
const checkFunctions_js_1 = require("./utils/checkFunctions.js");
/**
 * The `Site` class provides utility methods for interacting with websites.
 */
class Site {
    //#region Site
    /**
     * Gets the window object of a given domain URL.
     * @param domainURL - The URL of the domain to get the window object for.
     * @returns The window object of the given domain URL.
     */
    static getWindow(domainURL) {
        return __awaiter(this, void 0, void 0, function* () {
            return new jsdom_1.JSDOM((yield (0, axios_1.default)(domainURL)).data).window;
        });
    }
    /**
     * Gets the document object of a given domain URL.
     * @param domainURL - The URL of the domain to get the document object for.
     * @returns The document object of the given domain URL.
     */
    static getDocument(domainURL) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getWindow(domainURL)).document;
        });
    }
    /**
     * Gets the jQuery object of a given domain URL.
     * @param domainURL - The URL of the domain to get the jQuery object for.
     * @returns The jQuery object of the given domain URL.
     */
    static get$(domainURL) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, jquery_1.default)(yield this.getWindow(domainURL));
        });
    }
    //#region Private Zone
    /**
     * Gets the jQuery object of a given HTML content.
     * @param HTML - The HTML content to get the jQuery object for.
     * @returns The jQuery object of the given HTML content.
     */
    static get$HTML(HTMLElement) {
        return __awaiter(this, void 0, void 0, function* () {
            const window = new jsdom_1.JSDOM(HTMLElement).window;
            return (0, jquery_1.default)(window);
        });
    }
    /**
     * Gets the jQuery object of a given HTML content.
     * @param HTML - The HTML content to get the jQuery object for.
     * @returns The jQuery object of the given HTML content.
     */
    static getHTML(HTMLElement) {
        return new jsdom_1.JSDOM(HTMLElement).window;
    }
    /**
     * Gets the jQuery object for a given HTML element.
     * @param content - The HTML element or jQuery object to get the jQuery object from.
     * @returns A Promise that resolves to the jQuery object for the given element.
     * @throws An error if no usable content element is provided.
     */
    static makeHTMLElementArray(content) {
        if (content === null) {
            throw new Error("No usable content Element");
        }
        return (0, checkFunctions_js_1.isHTMLElement)(content) ? [content] : content instanceof Array ? content : content.get();
    }
    //#endregion
    //#endregion
    //#region Download function
    /**
     * Downloads a file from a given URL.
     * @param url - The URL of the file to download.
     * @param path - The directory path where the downloaded file should be saved.
     * @param fileName - (Optional) The name to use for the downloaded file.
     * @returns A Promise that resolves to the downloaded file.
     */
    static downloadFile(url, path, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.downloader.fileFromUrl(url, path, fileName);
        });
    }
    /**
     * Downloads all images from a given HTML content.
     * @param content - The HTML element from which to download images.
     * @param path - The directory path where the downloaded images should be saved.
     * @param fileName - (Optional) The name to use for the downloaded images.
     * @returns A Promise that resolves to the downloaded images.
     */
    static downloadAllImages(content, path, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const elements = this.makeHTMLElementArray(content);
            return yield this.downloader.getAllImages(elements, path, fileName);
        });
    }
}
exports.Site = Site;
/**
 * Provides a static instance of the Download class to easily download files.
 * @remarks The downloader instance can be accessed directly to download files without creating a new instance of the Download class.
 */
Site.downloader = new download_js_1.Download();
