"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Download_logConfig;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Download = void 0;
const fs_1 = require("fs");
const axios_1 = __importDefault(require("axios"));
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = require("path");
const getImages_1 = require("./utils/getImages");
const checkFunctions_1 = require("./utils/checkFunctions");
/**
 * Provides methods for downloading files from URLs and HTML elements.
 */
class Download {
    /**
     * Creates a new instance of the Download class.
     * @param loggerConfig - (Optional) Configuration options for the Logger.
     */
    constructor(loggerConfig) {
        _Download_logConfig.set(this, {}
        /**
         * Creates a new instance of the Download class.
         * @param loggerConfig - (Optional) Configuration options for the Logger.
         */
        );
        if (loggerConfig)
            __classPrivateFieldSet(this, _Download_logConfig, loggerConfig, "f");
    }
    /**
     * Creates a folder at the given path if it does not exist.
     * @param path - The path of the folder to create.
     * @returns A Promise that resolves once the folder is created.
     */
    createFolder(path) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield promises_1.default.mkdir(path, { recursive: true });
        });
    }
    /**
     * Downloads a file from the given URL and saves it to the given path.
     * @param url - The URL of the file to download.
     * @param path - The path to save the downloaded file.
     * @param fileName - The name to use for the downloaded file.
     * @param index - (Optional) The index of the file to download (if downloading multiple files with the same name).
    //  * @param tooManyUrl - (Optional) If set to true, the download process will be slowed down to prevent response errors caused by making too many fetch requests simultaneously.
     * @returns A Promise that resolves once the file is downloaded.
     * @throws An error if the request fails or the response status is not OK.
     */
    fileFromUrl(url, path, fileName, index) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            try {
                response = yield (0, axios_1.default)(url, {
                    responseType: "stream"
                });
            }
            catch (error) {
                throw new Error(`${error}\r\nRequest failed.`);
            }
            if (response.status < 200 || response.status > 299) {
                throw new Error(`Failed to download file, status code: ${response.status}`);
            }
            // Determine the file extension based on the Content-Type header
            const contentType = response.headers["content-type"];
            if (contentType === null || contentType === undefined || !(0, checkFunctions_1.isString)(contentType))
                throw new Error("No Content Type");
            const endIndex = contentType.indexOf(" ");
            const fileExtension = contentType.slice(contentType.indexOf("/") + 1, endIndex === -1 ? undefined : endIndex - 1);
            const newFilenameRegex = new RegExp(`[\\.](${fileExtension})$`, "g");
            let nameHasExtention = fileName.match(newFilenameRegex);
            if (nameHasExtention) {
                const filenameNoExtension = fileName.replace(newFilenameRegex, "");
                fileName = filenameNoExtension;
            }
            // Ensure the directory exists before writing the file
            yield this.createFolder(((0, path_1.dirname)(path + fileName)));
            // Write the file to disk
            const fileStream = (0, fs_1.createWriteStream)(`${path}${fileName}${index === undefined ? "" : index}.${fileExtension}`);
            if (response.data) {
                response.data.pipe(fileStream);
            }
            else {
                throw new Error(`Failed to get response body for file: ${url}`);
            }
            // Log success message
            if (__classPrivateFieldGet(this, _Download_logConfig, "f").log)
                console.log(`File downloaded successfully to ${path}`);
        });
    }
    /**
     * Downloads all images from the given HTML elements and saves them to the given path.
     * @param elements - The HTML elements from which to download images.
     * @param path - The path to save the downloaded images.
     * @param fileName - (Optional) The name to use for the downloaded images.
     */
    getAllImages(elements, path, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const imageGetter = new getImages_1.GetImages();
            if (fileName === undefined) {
                const descriptors = yield imageGetter.getImage(elements, fileName);
                yield this.fileFromdescriptor(descriptors, path);
            }
            else {
                const srces = yield imageGetter.getImage(elements, fileName);
                yield this.fileFromSet(srces, path, fileName);
            }
        });
    }
    /**
     * Downloads files from a set of URLs and saves them to the given path.
     * @param set - The set of URLs to download.
     * @param path - The path to save the downloaded files.
     * @param fileName - The name to use for the downloaded files.
     */
    fileFromSet(set, path, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            let i = 1;
            let tooManyUrl = false;
            if (set.size > 100)
                tooManyUrl = true, console.log(`We are slowing down the Download! ${"\x1b[38;2;255;165;0m"}\nIt will take more than ${Math.floor(set.size * 0.1 % 1000)} seconds`);
            for (const url of set) {
                if (tooManyUrl) {
                    yield new Promise((resolve) => setTimeout(resolve, 100));
                    this.fileFromUrl(url, path, fileName, i++);
                }
                else {
                    this.fileFromUrl(url, path, fileName, i++);
                }
            }
        });
    }
    /**
     * Downloads files from a set of ImageDescriptors and saves them to the given path.
     * @param set - The set of ImageDescriptors to download.
     * @param path - The path to save the downloaded files.
     */
    fileFromdescriptor(set, path) {
        return __awaiter(this, void 0, void 0, function* () {
            let tooManyUrl = false;
            if (set.length > 100)
                tooManyUrl = true, console.log(`We are slowing down the Download! ${"\x1b[38;2;255;165;0m"}\nIt will take more than ${Math.floor(set.length * 0.1 % 1000)} seconds`);
            for (const description of set) {
                if (tooManyUrl) {
                    yield new Promise((resolve) => setTimeout(resolve, 100));
                    this.fileFromUrl(description.src, path, description.name);
                }
                else {
                    this.fileFromUrl(description.src, path, description.name);
                }
            }
        });
    }
}
exports.Download = Download;
_Download_logConfig = new WeakMap();
